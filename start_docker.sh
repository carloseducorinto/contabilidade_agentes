#!/bin/bash

# =================================================================
# SCRIPT DE INICIALIZA√á√ÉO - SISTEMA DE CONTABILIDADE COM AGENTES
# =================================================================

set -e  # Parar em caso de erro

echo "üê≥ Iniciando Sistema de Contabilidade com Agentes via Docker"
echo "=============================================================="

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
    exit 1
fi

# Verificar se Docker Compose est√° dispon√≠vel
if ! command -v docker-compose > /dev/null 2>&1; then
    echo "‚ùå Docker Compose n√£o encontrado. Por favor, instale o Docker Compose."
    exit 1
fi

# Verificar se arquivo .env existe
if [ ! -f .env ]; then
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Criando a partir do exemplo..."
    if [ -f env.example ]; then
        cp env.example .env
        echo "‚úÖ Arquivo .env criado. EDITE o arquivo .env e configure sua OPENAI_API_KEY!"
        echo "üìù Use: nano .env ou code .env"
        echo ""
        read -p "Pressione Enter ap√≥s configurar o arquivo .env..."
    else
        echo "‚ùå Arquivo env.example n√£o encontrado."
        exit 1
    fi
fi

# Verificar se OPENAI_API_KEY est√° configurada
if ! grep -q "OPENAI_API_KEY=sk-" .env; then
    echo "‚ö†Ô∏è  OPENAI_API_KEY n√£o parece estar configurada no arquivo .env"
    echo "üîë Configure sua API Key da OpenAI para usar o sistema completo."
    echo ""
    read -p "Continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Execu√ß√£o cancelada. Configure a API Key e tente novamente."
        exit 1
    fi
fi

echo "üîß Verificando depend√™ncias..."

# Verificar se h√° containers antigos rodando
if docker-compose ps | grep -q "Up"; then
    echo "üîÑ Parando containers existentes..."
    docker-compose down
fi

echo "üì¶ Construindo e iniciando containers..."

# Perguntar sobre monitoramento
echo ""
read -p "Incluir monitoramento (Prometheus + Grafana)? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üöÄ Iniciando com monitoramento..."
    docker-compose --profile monitoring up --build -d
    MONITORING=true
else
    echo "üöÄ Iniciando aplica√ß√£o principal..."
    docker-compose up --build -d
    MONITORING=false
fi

echo ""
echo "‚è≥ Aguardando containers inicializarem..."
sleep 10

# Verificar status dos containers
echo "üìä Status dos containers:"
docker-compose ps

echo ""
echo "üè• Verificando health checks..."
sleep 5

# Verificar se backend est√° healthy
if docker-compose exec -T backend curl -f http://localhost:8000/health > /dev/null 2>&1; then
    echo "‚úÖ Backend est√° funcionando"
else
    echo "‚ö†Ô∏è  Backend pode n√£o estar totalmente pronto ainda"
fi

# Verificar se frontend est√° acess√≠vel
if curl -f http://localhost:8501/_stcore/health > /dev/null 2>&1; then
    echo "‚úÖ Frontend est√° funcionando"
else
    echo "‚ö†Ô∏è  Frontend pode n√£o estar totalmente pronto ainda"
fi

echo ""
echo "üéâ Sistema iniciado com sucesso!"
echo "=============================================================="
echo "üåê Acessos:"
echo "   Frontend (Streamlit): http://localhost:8501"
echo "   Backend (FastAPI):    http://localhost:8000"
echo "   API Docs:             http://localhost:8000/docs"

if [ "$MONITORING" = true ]; then
    echo "   Prometheus:           http://localhost:9090"
    echo "   Grafana:              http://localhost:3000 (admin/admin123)"
fi

echo ""
echo "üìã Comandos √∫teis:"
echo "   Ver logs:             docker-compose logs -f"
echo "   Parar sistema:        docker-compose down"
echo "   Reiniciar backend:    docker-compose restart backend"
echo "   Status containers:    docker-compose ps"
echo ""
echo "üìö Consulte DOCKER_GUIDE.md para mais informa√ß√µes."
echo ""
echo "‚ú® Pronto para usar! Acesse http://localhost:8501"

